// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // instruction: i xx a cccccc ddd jjj
        Not(in=instruction[15], out=Ainstruction); // A命令である
        Not(in=Ainstruction, out=Cinstruction); // C命令である

        // ALUの結果をレジスタに書き込むかどうか
        // C命令であればdビットはdest領域、dest領域はinstruction[5..7]、instruction[5]はALUの結果をAレジスタに書き込むかどうか
        And(a=Cinstruction, b=instruction[5], out=ALUtoA);
        Mux16(a=instruction, b=outALU, sel=ALUtoA, out=inAregister);

        // A命令もしくはAレジスタへの書き込みならAレジスタから読み込み
        Or(a=Ainstruction, b=ALUtoA, out=loadA);
        ARegister(in=inAregister, load=loadA, out=outARegister, out[0..14]=addressM); // addressMはアドレスがAの場所にあるメモリの値

        Mux16(a=outARegister, b=inM, sel=instruction[12], out=outAM);

        // C命令であればdビットはdest領域、dest領域はinstruction[3..5]、instruction[4]はALUの結果をDレジスタに書き込むかどうか
        And(a=Cinstruction, b=instruction[4], out=ALUtoD);
        DRegister(in=outALU, load=ALUtoD, out=outDRegister);

        // cビット（[6..11]）によってALUがどの関数を実行するかが決定される
        ALU(
            x=outDRegister, y=outAM,
            zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
            out=outALU, out=outM, // ALU計算結果がoutM
            zr=outZR, // out=0の場合のみtrue
            ng=outNG // out<0 の場合のみtrue
        );

        // C命令であればdビットはdest領域、dest領域はinstruction[3..5]、instruction[3]は計算結果をMに書き込むかどうか
        And(a=Cinstruction, b=instruction[3], out=writeM);

        // jump領域の仕様に従って処理を実行
        // instruction[0]: ALUの計算結果の値が正の場合に移動することを指定
        // instruction[1]: ALUの計算結果の値が0の場合に移動することを指定
        // instruction[2]: ALUの計算結果の値が負の場合に移動することを指定
        And(a=outZR, b=instruction[1], out=jeq); // 計算結果0で0のときに移動
        And(a=outNG, b=instruction[2], out=jlt); // 計算結果負で負のときに移動

        Or(a=outZR, b=outNG, out=zeroOrNegative);
        Not(in=zeroOrNegative, out=positive);
        And(a=positive, b=instruction[0], out=jgt); // 計算結果正で正のときに移動

        Or(a=jeq, b=jlt, out=jle);
        Or(a=jle, b=jgt, out=jumpToA); // すべての条件を満たす

        And(a=Cinstruction, b=jumpToA, out=loadPC); // C命令で移動指定があれば読み込み
        Not(in=loadPC, out=incPC); // それ以外は1加算
        PC(in=outARegister, inc=incPC, load=loadPC, reset=reset, out[0..14]=pc);
}
